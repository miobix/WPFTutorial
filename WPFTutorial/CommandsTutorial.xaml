<Window x:Class="WPFTutorial.CommandsTutorial"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:self="clr-namespace:WPFTutorial"
        xmlns:local="clr-namespace:WPFTutorial"
        mc:Ignorable="d"
        Title="Commands" Height="450" Width="400">
    <Window.CommandBindings>
        <!--Define all commands here, bind the executed and can execute properties, then use the command wherever necessary-->
        <CommandBinding Command="ApplicationCommands.New" Executed="NewCommand_Executed" CanExecute="NewCommand_CanExecute" />
        <CommandBinding Command="ApplicationCommands.Cut" CanExecute="CutCommand_CanExecute" Executed="CutCommand_Executed" />
        <CommandBinding Command="ApplicationCommands.Paste" CanExecute="PasteCommand_CanExecute" Executed="PasteCommand_Executed" />
       
    </Window.CommandBindings>
    <StackPanel>
        <TextBlock HorizontalAlignment="Center" TextAlignment="Center"  TextWrapping="Wrap" Margin="10">Examples of Commands, Executed and CanExecute</TextBlock>
        <TextBlock HorizontalAlignment="Center" TextAlignment="Center"  TextWrapping="Wrap" Margin="10">Applicaiton Commands are predefined. This button can always execute the New Command.</TextBlock>
        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10
                ">
        <Button Command="ApplicationCommands.New">New</Button>
    </StackPanel>
        <TextBlock HorizontalAlignment="Center" TextAlignment="Center"  TextWrapping="Wrap" Margin="10">Limiting functionality with CanExecute. Cut and Paste only when there is text available</TextBlock>

        <DockPanel Height="120" Margin="10">
            <WrapPanel DockPanel.Dock="Top" Margin="3">
                <Button Command="ApplicationCommands.Cut" Width="60">_Cut</Button>
                <Button Command="ApplicationCommands.Paste" Width="60" Margin="3,0">_Paste</Button>
            </WrapPanel>
            <TextBox AcceptsReturn="True" Name="txtEditor" />
        </DockPanel>
        
        <!--
        It is also possible for common commands like cut, paste, undo, etc - to have a default behaviour
        Use CommandTarget for this, and the name of the element to bind. 
        Example above basically overrides the defaul behavior
          <DockPanel>
        <WrapPanel DockPanel.Dock="Top" Margin="3">
            <Button Command="ApplicationCommands.Cut" CommandTarget="{Binding ElementName=txtEditor}" Width="60">_Cut</Button>
            <Button Command="ApplicationCommands.Paste" CommandTarget="{Binding ElementName=txtEditor}" Width="60" Margin="3,0">_Paste</Button>
        </WrapPanel>
        <TextBox AcceptsReturn="True" Name="txtEditor" />
    </DockPanel>
        
        -->

        <TextBlock HorizontalAlignment="Center" TextAlignment="Center"  TextWrapping="Wrap" Margin="10">Custom Commands can also be introduced from a static class.</TextBlock>
       

    </StackPanel>
</Window>
